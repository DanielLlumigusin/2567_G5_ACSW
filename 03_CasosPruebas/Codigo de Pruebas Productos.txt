const { Given, When, Then, After, setDefaultTimeout } = require('@cucumber/cucumber');
const { Builder, By, until } = require('selenium-webdriver');

setDefaultTimeout(20000);
let driver;

// Función para iniciar el navegador
async function initDriver() {
    driver = await new Builder().forBrowser('chrome').build();
}

// Función para cerrar el navegador
async function quitDriver() {
    if (driver) {
        await driver.quit();
    }
}

// Escenario: Navegar a la página de inicio
Given('Yo ingreso a la página de inicio', async () => {
    try {
        await initDriver();
        await driver.get('http://localhost:3000');
    } catch (error) {
        console.error('Error al ingresar a Home:', error);
        throw error;
    }
});

// Primer Escenario: Verificar el título de la página
When('Puedo ver el título de la página', async () => {
    await driver.wait(until.elementLocated(By.id('ProductsAll')), 20000);
});

Then('El título de la página debe ser {string}', async (expectedTitle) => {
    const titleElement = await driver.findElement(By.id('ProductsAll'));
    const title = await titleElement.getText();
    if (title !== expectedTitle) {
        throw new Error(`El título debe ser: ${expectedTitle}, el título encontrado es: ${title}`);
    }
});

// Segundo Escenario: Verificar el título de un producto
When('Puedo ver el título del Producto', async () => {
    await driver.wait(until.elementLocated(By.id('Pruebas12')), 20000);
});

Then('El título del producto es {string}', async (expectedProductTitle) => {
    const productTitleElement = await driver.findElement(By.id('Pruebas12'));
    const productTitle = await productTitleElement.getText();
    if (productTitle !== expectedProductTitle) {
        throw new Error(`El título debe ser: ${expectedProductTitle}, el título encontrado es: ${productTitle}`);
    }
});

// Tercer Escenario
When('Selecciono la categoría {string}', async (category) => {
    const categoryCheckbox = await driver.findElement(By.xpath(`//label[contains(text(), '${category}')]`));
    await categoryCheckbox.click();
});

Then('Solo se deben mostrar productos de la categoría {string}', async (category) => {
    const products = await driver.findElements(By.className('card-title'));
    for (const product of products) {
        const productCategory = await product.getText();
        if (!productCategory.includes(category)) {
            throw new Error(`Se encontró un producto fuera de la categoría: ${category}`);
        }
    }
});

// Cuarto Escenario
When('Selecciono el rango de precios {string}', async (priceRange) => {
    const priceRadio = await driver.findElement(By.xpath(`//label[contains(text(), '${priceRange}')]`));
    await priceRadio.click();
});

Then('Solo se deben mostrar productos con precios entre {string}', async (priceRange) => {
    const [minPrice, maxPrice] = priceRange.split(' - ').map(Number);
    const productPrices = await driver.findElements(By.className('card-price'));
    for (const priceElement of productPrices) {
        const price = parseFloat(await priceElement.getText().replace(/[^0-9.-]+/g, ""));
        if (price < minPrice || price > maxPrice) {
            throw new Error(`Se encontró un producto con precio fuera del rango: ${priceRange}`);
        }
    }
});

// Quinto Escenario
When('Agrego el producto con el ID {string} al carrito', async (productId) => {
    const addToCartButton = await driver.findElement(By.xpath(`//div[@id='${productId}']//button[text()='Añadir al carrito']`));
    await addToCartButton.click();
});

Then('El producto debe aparecer en el carrito', async () => {
    const cartItems = await driver.findElement(By.id('cart')).getText();
    if (!cartItems.includes('Pruebas12')) {
        throw new Error('El producto no se añadió al carrito');
    }
});

// Sexto Escenario
When('Verifico la cantidad total de productos', async () => {
    await driver.wait(until.elementLocated(By.id('total-products')), 20000);
});

Then('La cantidad total de productos debe ser {int}', async (expectedTotal) => {
    const totalElement = await driver.findElement(By.id('total-products'));
    const total = parseInt(await totalElement.getText(), 10);
    if (total !== expectedTotal) {
        throw new Error(`La cantidad total debe ser: ${expectedTotal}, la cantidad encontrada es: ${total}`);
    }
});

// Séptimo Escenario
When('Hago clic en "Cargar más"', async () => {
    const loadMoreButton = await driver.findElement(By.className('loadmore'));
    await loadMoreButton.click();
});

Then('Se deben cargar y mostrar más productos', async () => {
    await driver.wait(until.elementLocated(By.className('card')), 20000);
    const products = await driver.findElements(By.className('card'));
    if (products.length <= 10) {
        throw new Error('No se cargaron más productos');
    }
});

// Octavo Escenario
When('Puedo ver el producto con el ID {string}', async (productId) => {
    await driver.wait(until.elementLocated(By.xpath(`//div[@id='${productId}']//img`)), 20000);
});

Then('El producto debe tener una imagen', async (productId) => {
    const productImage = await driver.findElement(By.xpath(`//div[@id='${productId}']//img`));
    const src = await productImage.getAttribute('src');
    if (!src) {
        throw new Error('El producto no tiene una imagen');
    }
});

// Noveno Escenario
Then('El producto debe tener una descripción de al menos 60 caracteres', async () => {
    const productDescription = await driver.findElement(By.className('card-text'));
    const description = await productDescription.getText();
    if (description.length < 60) {
        throw new Error('La descripción del producto tiene menos de 60 caracteres');
    }
});

// Décimo Escenario
When('Hago clic en el botón de "Resetear"', async () => {
    const resetButton = await driver.findElement(By.xpath("//button[text()='RESETEAR']"));
    await resetButton.click();
});

Then('Todos los filtros deben ser removidos y mostrar todos los productos', async () => {
    const categoryCheckboxes = await driver.findElements(By.css('input[type="checkbox"]:checked'));
    const radioButtons = await driver.findElements(By.css('input[type="radio"]:checked'));
    if (categoryCheckboxes.length > 0 || radioButtons.length > 0) {
        throw new Error('Los filtros no se han reseteado correctamente');
    }
});

// Cierra el navegador después de las pruebas
After(async () => {
    await quitDriver();
});
